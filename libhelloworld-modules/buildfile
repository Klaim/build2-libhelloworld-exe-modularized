int_libs = # Interface dependencies.
imp_libs = # Implementation dependencies.
#import imp_libs += libhello%lib{hello}

lib{helloworld-modules}: {hxx ixx txx cxx mxx}{** -version} hxx{version} $imp_libs $int_libs

# Include the generated version header into the distribution (so that we don't
# pick up an installed one) and don't remove it when cleaning in src (so that
# clean results in a state identical to distributed).
#
{hxx}{version}: in{version} $src_root/manifest
{hxx}{version}: dist  = true
{hxx}{version}: clean = ($src_root != $out_root)

cxx.poptions =+ "-I$out_root" "-I$src_root"

# No need anymore to use export macros
# obja{*}: cxx.poptions += -DLIBHELLOWORLD_MODULES_STATIC_BUILD
# objs{*}: cxx.poptions += -DLIBHELLOWORLD_MODULES_SHARED_BUILD
# 
# lib{helloworld-modules}: cxx.export.poptions = "-I$out_root" "-I$src_root"
# 
# liba{helloworld-modules}: cxx.export.poptions += -DLIBHELLOWORLD_MODULES_STATIC
# libs{helloworld-modules}: cxx.export.poptions += -DLIBHELLOWORLD_MODULES_SHARED
# 
# lib{helloworld-modules}: cxx.export.libs = $int_libs

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{helloworld-modules}: bin.lib.version = @"-$version.project_id"
else
  lib{helloworld-modules}: bin.lib.version = @"-$version.major.$version.minor"

# Install into the libhelloworld-modules/ subdirectory of, say, /usr/include/
# recreating subdirectories.
#
{mxx hxx ixx txx}{*}: install         = include/libhelloworld-modules/
{mxx hxx ixx txx}{*}: install.subdirs = true
